// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum ImagePurpose {
//   PROFILE
//   DOCUMENT
//   PROJECT
//   OTHER
// }

enum StakeholderRole {
  OWNER
  SPONSOR
  CONSULTANT
  PARTNER
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TeamRole {
  LEADER
  MEMBER
  // COORDINATOR
  // ADVISOR
  // REVIEWER
  // SUPPORT
  // COMMUNICATOR
}

enum ParticipationStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum ParticipationRole {
  MEMBER
}

enum ProjectAdminRole {
  MANAGER
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String?
  hasPassword       Boolean  @default(true)
  name              String
  verified          Boolean  @default(false)
  passwordChangedAt DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  googleId            String?
  profilePictureId    String?
  googleEmailVerified Boolean?
  googleProfileUrl    String?

  projectStakes    ProjectStakeholder[]
  profilePicture   Image?               @relation(fields: [profilePictureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invitations      Invitation[]
  uploadedImages   Image[]              @relation("uploadedImages")
  participations   Participation[]      @relation("participation")
  createdProjects  Project[]            @relation("project_creator")
  uploadedFiles    File[]
  educations       Education[]
  professions      Profession[]
  certifications   Certification[]
  hobbies          Hobby[]
  preferences      Preference[]
  skills           Skill[]
  groupMembers     GroupMember[]
  groups           Group[]              @relation("CreatedGroups")
  receivedMessages MessageReceiver[]
  sentMessages          Message[]

  @@unique([googleId, id])
  @@map("users")
}

model Education {
  id           String   @id @default(uuid())
  userId       String
  degree       String
  institution  String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("educations")
}

model Profession {
  id                  String    @id @default(uuid())
  userId              String
  jobTitle            String
  company             String
  startDate           DateTime
  endDate             DateTime?
  description         String?
  isCurrentlyEmployed Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("professions")
}

model Certification {
  id                  String    @id @default(uuid())
  userId              String
  certificationName   String
  issuingOrganization String
  issueDate           DateTime
  expirationDate      DateTime?
  credentialId        String?
  description         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("certifications")
}

model Hobby {
  id          String   @id @default(uuid())
  userId      String
  name        String // e.g., "Photography", "Coding", "Traveling"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("hobbies")
}

model Skill {
  id          String   @id @default(uuid())
  userId      String
  skillName   String
  skillLevel  String // E.g., Beginner, Intermediate, Expert
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, skillName]) // Ensures skillName is unique per user
  @@index([userId])
  @@map("skills")
}

model Preference {
  id                 String   @id @default(uuid())
  userId             String
  emailNotifications Boolean  @default(true) // Whether the user receives email notifications
  smsNotifications   Boolean  @default(false) // Whether the user receives SMS notifications
  pushNotifications  Boolean  @default(true) // Whether the user receives push notifications
  darkMode           Boolean  @default(false) // Whether the user prefers dark mode
  language           String   @default("en") // User's preferred language (e.g., "en", "es")
  timeZone           String   @default("UTC") // User's time zone (e.g., "UTC", "America/New_York")
  privacyLevel       String   @default("standard") // Privacy level: "standard", "private", "custom"
  showOnlineStatus   Boolean  @default(true) // Whether the user shows their online status to others
  twoFactorAuth      Boolean  @default(false) // Whether the user has two-factor authentication enabled
  emailUpdates       Boolean  @default(true) // Whether the user receives email updates (e.g., newsletters)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("preferences")
}

// user    User    @relation("participation", fields: [userId], references: [id])
// inviter User    @relation("inviter", fields: [invitedBy], references: [id])

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique()
  otp       String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("otps")
}

model Project {
  id          String            @id @default(uuid())
  title       String            @db.VarChar(255)
  description String?           @db.Text
  status      ProjectStatus     @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  creatorId   String
  visibility  ProjectVisibility @default(PRIVATE)
  priority    ProjectPriority   @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags           String[]
  wallet         Wallet?
  stakeholders   ProjectStakeholder[]
  invitations    Invitation[]
  participations Participation[]
  teams          Team[]
  creator        User                 @relation(name: "project_creator", fields: [creatorId], references: [id])
  tasks          Task[]

  projectGroup ProjectGroup? @relation(name: "ProjectToProjectGroup")

  @@unique([creatorId, title])
  @@map("projects")
}

model ProjectAdmin {
  id              String   @id @default(uuid())
  participationId String   @unique
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  participation       Participation        @relation(fields: [participationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  walletTransactions  WalletTransaction[]
  // Task              Task[]
  managerTasks        ManagerTasks[]
  teamTaskAssignments TeamTaskAssignment[]

  @@map("project_admins")
}

model ProjectStakeholder {
  id        String          @id @default(uuid())
  projectId String
  userId    String
  role      StakeholderRole
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Project         @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_stakeholders")
}

model Invitation {
  id              String       @id @default(uuid())
  email           String
  projectId       String
  status          InviteStatus @default(PENDING)
  invitedUserName String?
  message         String?      @db.Text
  invitedBy       String
  sentAt          DateTime?
  actionedAt      DateTime?
  seen            Boolean      @default(false)
  seenAt          DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  participationId String?

  // Relations
  project       Project        @relation(fields: [projectId], references: [id])
  inviter       User           @relation(fields: [invitedBy], references: [id])
  participation Participation? @relation(name: "invited_participation")

  @@unique([projectId, email])
  @@map("invitations")
}

model Participation {
  id           String              @id @default(uuid())
  projectId    String
  userId       String
  status       ParticipationStatus @default(ACTIVE)
  role         ParticipationRole   @default(MEMBER)
  designation  String[]            @default([])
  invitationId String?             @unique
  joinedAt     DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  invitation            Invitation?            @relation(name: "invited_participation", fields: [invitationId], references: [id])
  project               Project                @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                  User                   @relation("participation", fields: [userId], references: [id])
  adminRole             ProjectAdmin[]
  teamMemberships       TeamMembership[]
  taskAssignments       TaskAssignment[]
  taskSubmissions       TaskSubmission[]
  assignmentSubmissions assignmentSubmission[]

  @@unique([projectId, userId])
  @@map("participations")
}

model Team {
  id                  String               @id @default(uuid())
  name                String               @db.VarChar(255)
  purpose             String?              @db.Text
  projectId           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              TeamStatus           @default(ACTIVE)
  responsibilities    String[]
  project             Project              @relation(fields: [projectId], references: [id])
  memberShips         TeamMembership[]
  teamWallet          TeamWallet?
  teamTaskAssignments TeamTaskAssignment[]
  teamGroup           TeamGroup?           @relation(name: "TeamToTeamGroup")

  @@unique([projectId, name])
  @@map("teams")
}

model TeamMembership {
  id               String     @id @default(uuid())
  participationId  String
  teamId           String
  purpose          String?    @db.Text
  responsibilities String[]
  joinedAt         DateTime   @default(now())
  roles            TeamRole[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  team          Team          @relation(fields: [teamId], references: [id])
  participation Participation @relation(fields: [participationId], references: [id])
  teamLeader    TeamLeader?

  @@unique([participationId, teamId])
  @@map("team_memberships")
}

model TeamLeader {
  id           String   @id @default(uuid())
  membershipId String   @unique
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  membership      TeamMembership    @relation(fields: [membershipId], references: [id])
  teamLeaderTasks TeamLeaderTasks[]

  @@map("team_leaders")
}

model Wallet {
  id              String       @id @default(uuid())
  estimatedBudget Float        @default(0)
  balance         Float        @default(0.0)
  currency        Currency     @default(USD)
  status          WalletStatus @default(ACTIVE)
  projectId       String       @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  transactions WalletTransaction[]

  @@map("wallets")
}

enum WalletStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum Currency {
  USD // United States Dollar
  EUR // Euro
  GBP // British Pound
  JPY // Japanese Yen
  AUD // Australian Dollar
  CAD // Canadian Dollar
  INR // Indian Rupee
  CNY // Chinese Yuan
  CHF // Swiss Franc
  NZD // New Zealand Dollar
  BDT //Bangladesh TK
}

model WalletTransaction {
  id              String          @id @default(uuid())
  walletId        String
  amount          Float
  transactionType TransactionType
  description     String?
  transactionById String
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  wallet           Wallet            @relation(fields: [walletId], references: [id])
  transactionBy    ProjectAdmin      @relation(fields: [transactionById], references: [id])
  teamTransactions TeamTransaction[]

  @@map("wallet_transactions")
}

enum TransactionType {
  CREDIT
  DEBIT
}

model TeamWallet {
  id        String       @id @default(uuid())
  balance   Float        @default(0.0)
  currency  Currency     @default(USD)
  status    WalletStatus @default(ACTIVE)
  teamId    String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  team         Team              @relation(fields: [teamId], references: [id])
  transactions TeamTransaction[]

  @@map("team_wallets")
}

model TeamTransaction {
  id                         String          @id @default(uuid())
  teamWalletId               String
  amount                     Float
  transactionType            TransactionType
  description                String?
  transactionDate            DateTime        @default(now())
  projectWalletTransactionId String
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt

  // Relations
  teamWallet               TeamWallet        @relation(fields: [teamWalletId], references: [id])
  projectWalletTransaction WalletTransaction @relation(fields: [projectWalletTransactionId], references: [id])

  @@map("team_transactions")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  HALTED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskAssignmentType {
  GROUP
  INDIVIDUAL
}

model Task {
  id                 String             @id @default(uuid())
  title              String             @db.VarChar(255)
  description        String?            @db.VarChar(1300)
  status             TaskStatus         @default(TODO)
  priority           TaskPriority       @default(MEDIUM)
  dueDate            DateTime?
  inableBudget       Boolean            @default(false)
  budget             Int                @default(0)
  projectId          String
  createdBy          String
  taskAssignmentType TaskAssignmentType
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  project            Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  // TaskAssignment TaskAssignment[]
  managerTasks       ManagerTasks?
  teamLeaderTasks    TeamLeaderTasks?
  budgetTransactions TaskBudgetTransaction[]
  taskAssignment     TaskAssignment[]
  teamTaskAssignment TeamTaskAssignment[]
  taskAttachments    TaskAttachments[]

  @@map("tasks")
}

model TaskAttachments {
  id        String   @id @default(uuid())
  taskId    String
  fileId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file      File     @relation(fields: [fileId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model ManagerTasks {
  id        String   @id @default(uuid())
  taskId    String   @unique
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task    Task         @relation(fields: [taskId], references: [id])
  creator ProjectAdmin @relation(fields: [adminId], references: [id])

  @@map("manager_tasks")
}

model TeamLeaderTasks {
  id           String   @id @default(uuid())
  taskId       String   @unique
  teamLeaderId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  task    Task       @relation(fields: [taskId], references: [id])
  creator TeamLeader @relation(fields: [teamLeaderId], references: [id])

  @@map("team_leader_tasks")
}

model TaskBudgetTransaction {
  id              String          @id @default(uuid())
  taskId          String
  amount          Int
  transactionType TransactionType
  createdAt       DateTime        @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_budget_transactions")
}

model TaskAssignment {
  id              String    @id @default(uuid())
  taskId          String
  participationId String?
  assignedAt      DateTime? @default(now())

  task                 Task                   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  participation        Participation?         @relation(fields: [participationId], references: [id], onDelete: SetNull)
  assignmentSubmission assignmentSubmission[]

  @@unique([taskId, participationId])
  @@map("team_task_assignment")
}

enum TeamTaskAssignStatus {
  PENDING
  ASSIGNED
  COMPLETED
}

model TeamTaskAssignment {
  id         String   @id @default(uuid())
  taskId     String
  teamId     String
  assignedBy String
  // status    TaskStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  task     Task         @relation(fields: [taskId], references: [id])
  team     Team         @relation(fields: [teamId], references: [id])
  assigner ProjectAdmin @relation(fields: [assignedBy], references: [id])

  @@unique([taskId, teamId])
  @@map("team_tasks")
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model assignmentSubmission {
  id           String           @id @default(uuid())
  assignmentId String
  submittedBy  String?
  description  String           @db.Text
  status       SubmissionStatus

  // relations
  participation  Participation?   @relation(fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submissionFile SubmissionFile[]
  taskAssignment TaskAssignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("task_assignment_submissions")
}

model TaskSubmission {
  id          String           @id @default(uuid())
  taskId      String
  submittedBy String?
  description String           @db.Text
  status      SubmissionStatus

  // relations
  participation   Participation?   @relation(fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submissionFiles SubmissionFile[]

  @@map("task_submissions")
}

model SubmissionFile {
  id           String   @id @default(uuid())
  submissionId String
  fileId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  taskSubmission         TaskSubmission        @relation(fields: [submissionId], references: [id])
  file                   File                  @relation(fields: [fileId], references: [id])
  assignmentSubmission   assignmentSubmission? @relation(fields: [assignmentSubmissionId], references: [id])
  assignmentSubmissionId String?

  @@map("submission_files")
}

enum FileType {
  PDF
  IMAGE // Generic for image files
  VIDEO // Generic for video files
  AUDIO // Generic for audio files
  DOCUMENT // Generic for document files not explicitly defined
  DOC // Microsoft Word Document
  DOCX // Microsoft Word Open XML Document
  PPT // Microsoft PowerPoint Presentation
  PPTX // Microsoft PowerPoint Open XML Presentation
  XLS // Microsoft Excel Spreadsheet
  XLSX // Microsoft Excel Open XML Spreadsheet
  CSV // Comma-Separated Values
  TXT // Plain Text File
  SPREADSHEET // Generic for spreadsheet files not explicitly defined
  OTHER // For any other file type not covered
}

model File {
  id        String   @id @default(uuid())
  file      String
  publicId  String
  fileType  FileType
  fileName  String
  extension String
  uploadBy  String?
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  uploader        User?             @relation(fields: [uploadBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submissionFile  SubmissionFile[]
  taskAttachments TaskAttachments[]
  MessageFile     MessageFile[]

  @@map("files")
}

model Image {
  id          String  @id @default(uuid())
  uploadBy    String?
  minUrl      String?
  midUrl      String?
  fullUrl     String?
  minPublicId String?
  midPublicId String?
  maxPublicId String?
  used        Boolean @default(false)

  uploader User? @relation(fields: [uploadBy], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "uploadedImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]

  @@map("images")
}

// Enums
enum MessageStatus {
  READ
  UNREAD
}

enum GroupRole {
  ADMIN
  MEMBER
}

// Models

model Message {
  id        String        @id @default(uuid())
  content   String?
  status    MessageStatus @default(UNREAD)
  senderId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  groupMessage     GroupMessage?
  files            MessageFile[]
  messageReceivers MessageReceiver[]
  sender           User              @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageFile {
  id        String @id @default(uuid()) // Unique identifier for the MessageFile
  fileId    String // ID of the file
  messageId String // ID of the message

  // Relations
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([fileId, messageId]) // Prevent duplicate file-message associations
  @@map("message_files")
}

model MessageReceiver {
  id         String    @id @default(uuid())
  messageId  String
  receiverId String
  seenAt     DateTime?
  deletedAt  DateTime?

  // Relations
  message  Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  receiver User    @relation(fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([messageId, receiverId]) // Ensure a unique message-receiver combination
  @@index([receiverId])
  @@map("message_receivers")
}

model Group {
  id          String   @id @default(uuid()) // Unique identifier for the group
  name        String // Group name
  description String? // Optional group description
  createdBy   String // User who created the group
  createdAt   DateTime @default(now()) // Group creation timestamp
  updatedAt   DateTime @updatedAt // Last update timestamp

  // Relations
  creator      User           @relation("CreatedGroups", fields: [createdBy], references: [id], onDelete: Cascade)
  members      GroupMember[] // List of members in the group
  messages     GroupMessage[] // Messages sent in the group
  projectGroup ProjectGroup[]
  teamGroup    TeamGroup[]

  @@map("groups")
}

model GroupMember {
  id       String    @id @default(uuid()) // Unique identifier for the group membership
  userId   String // ID of the user
  groupId  String // ID of the group
  role     GroupRole @default(MEMBER) // Role of the user in the group (e.g., admin, member)
  joinedAt DateTime  @default(now()) // Timestamp when the user joined the group

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Ensure a user can join a group only once
  @@map("group_members")
}

model GroupMessage {
  id        String   @id @default(uuid()) // Unique identifier for the group message
  groupId   String // ID of the group
  messageId String // ID of the message (relation to Message)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId])
  @@index([groupId])
  @@map("group_messages")
}

model ProjectGroup {
  id        String   @id @default(uuid())
  projectId String   @unique // Enforce one-to-one relationship with Project
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(name: "ProjectToProjectGroup", fields: [projectId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("project_groups")
}

model TeamGroup {
  id        String   @id @default(uuid())
  teamId    String   @unique // Enforce one-to-one relationship with Team
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  team  Team  @relation(name: "TeamToTeamGroup", fields: [teamId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("team_groups")
}
