// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum ImagePurpose {
//   PROFILE
//   DOCUMENT
//   PROJECT
//   OTHER
// }

enum StakeholderRole {
  OWNER
  SPONSOR
  CONSULTANT
  PARTNER
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TeamRole {
  LEADER
  // COORDINATOR
  // ADVISOR
  // REVIEWER
  // SUPPORT
  // COMMUNICATOR
}

enum ParticipationStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum ParticipationRole {
  MEMBER
}

enum ProjectAdminRole {
  MANAGER
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String?
  hasPassword       Boolean  @default(true)
  name              String
  verified          Boolean  @default(false)
  passwordChangedAt DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  googleId            String?
  profilePicture      String?
  googleEmailVerified Boolean?
  googleProfileUrl    String?
  image               Image[]
  projectStakeholder  ProjectStakeholder[]
  Invitation          Invitation[]
  participations     Participation[]      @relation("participation")
  CreatedProjects     Project[]            @relation("project_creator")
  // TaskAssignment      TaskAssignment[]

  @@unique([googleId, id])
  @@map("users")
}

// user    User    @relation("participation", fields: [userId], references: [id])
// inviter User    @relation("inviter", fields: [invitedBy], references: [id])

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique()
  otp       String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("otps")
}

model Project {
  id          String            @id @default(uuid())
  title       String            @db.VarChar(255)
  description String?           @db.Text
  status      ProjectStatus     @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  creatorId   String
  visibility  ProjectVisibility @default(PRIVATE)
  priority    ProjectPriority   @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags           String[]
  stakeholders   ProjectStakeholder[]
  invitations    Invitation[]
  participations Participation[]
  teams          Team[]
  creator        User                 @relation(name: "project_creator", fields: [creatorId], references: [id])
  wallet         Wallet[]
  Task           Task[]

  @@unique([creatorId, title])
  @@map("projects")
}

model ProjectAdmin {
  id              String   @id @default(uuid())
  participationId String   @unique
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  participation     Participation       @relation(fields: [participationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  WalletTransaction WalletTransaction[]
  // Task              Task[]
  ManagerTasks      ManagerTasks[]
  TeamTask          TeamTask[]

  @@map("project_admins")
}

model ProjectStakeholder {
  id        String          @id @default(uuid())
  projectId String
  userId    String
  role      StakeholderRole
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Project         @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_stakeholders")
}

model Image {
  id     String  @id @default(uuid())
  userId String
  url    String
  used   Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, url])
  @@map("images")
}



model Invitation {
  id               String       @id @default(uuid())
  email            String
  projectId        String
  status           InviteStatus @default(PENDING)
  invitedUserName  String?
  message          String?      @db.Text
  invitedBy        String
  sentAt           DateTime?
  actionedAt       DateTime?
  seen             Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  participationId String?

  // Relations
  project        Project        @relation(fields: [projectId], references: [id])
  inviter        User           @relation(fields: [invitedBy], references: [id])
  participation Participation? @relation(name: "invited_participation")

  @@unique([projectId, email])
  @@map("invitations")
}

model Participation {
  id           String               @id @default(uuid())
  projectId    String
  userId       String
  status       ParticipationStatus @default(ACTIVE)
  role         ParticipationRole   @default(MEMBER)
  invitationId String?              @unique
  joinedAt     DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  invitation     Invitation?      @relation(name: "invited_participation", fields: [invitationId], references: [id])
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user           User             @relation("participation", fields: [userId], references: [id])
  adminRole      ProjectAdmin[]
  TeamMembership TeamMembership[]

  @@unique([projectId, userId])
  @@map("participations")
}

model Team {
  id               String           @id @default(uuid())
  name             String           @db.VarChar(255)
  purpose          String?          @db.Text
  projectId        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  status           TeamStatus       @default(ACTIVE)
  responsibilities String[]
  project          Project          @relation(fields: [projectId], references: [id])
  memberShips      TeamMembership[]
  TeamWallet       TeamWallet?
  TeamTask         TeamTask[]

  @@unique([projectId, name])
  @@map("teams")
}

model TeamMembership {
  id               String     @id @default(uuid())
  participationId  String
  teamId           String
  purpose          String?    @db.Text
  responsibilities String[]
  joinedAt         DateTime   @default(now())
  roles            TeamRole[]

  // Relations
  team          Team          @relation(fields: [teamId], references: [id])
  participation Participation @relation(fields: [participationId], references: [id])
  teamLeader    TeamLeader?

  @@unique([participationId, teamId])
  @@map("team_memberships")
}

model TeamLeader {
  id           String  @id @default(uuid())
  membershipId String  @unique
  active       Boolean @default(true)

  // Relations
  membership      TeamMembership    @relation(fields: [membershipId], references: [id])
  TeamLeaderTasks TeamLeaderTasks[]

  @@map("team_leaders")
}

model Wallet {
  id        String       @id @default(uuid())
  balance   Float        @default(0.0)
  currency  Currency     @default(USD)
  status    WalletStatus @default(ACTIVE)
  projectId String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  transactions WalletTransaction[]

  @@map("wallets")
}

enum WalletStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum Currency {
  USD // United States Dollar
  EUR // Euro
  GBP // British Pound
  JPY // Japanese Yen
  AUD // Australian Dollar
  CAD // Canadian Dollar
  INR // Indian Rupee
  CNY // Chinese Yuan
  CHF // Swiss Franc
  NZD // New Zealand Dollar
  BDT //Bangladesh TK
}

model WalletTransaction {
  id              String          @id @default(uuid())
  walletId        String
  amount          Float
  transactionType TransactionType
  description     String?
  transactionById String
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  wallet          Wallet            @relation(fields: [walletId], references: [id])
  transactionBy   ProjectAdmin      @relation(fields: [transactionById], references: [id])
  TeamTransaction TeamTransaction[]

  @@map("wallet_transactions")
}

enum TransactionType {
  CREDIT
  DEBIT
}

model TeamWallet {
  id        String       @id @default(uuid())
  balance   Float        @default(0.0)
  currency  Currency     @default(USD)
  status    WalletStatus @default(ACTIVE)
  teamId    String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  team         Team              @relation(fields: [teamId], references: [id])
  transactions TeamTransaction[]

  @@map("team_wallets")
}

model TeamTransaction {
  id                         String          @id @default(uuid())
  teamWalletId               String
  amount                     Float
  transactionType            TransactionType
  description                String?
  transactionDate            DateTime        @default(now())
  projectWalletTransactionId String
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt

  // Relations
  teamWallet               TeamWallet        @relation(fields: [teamWalletId], references: [id])
  projectWalletTransaction WalletTransaction @relation(fields: [projectWalletTransactionId], references: [id])

  @@map("team_transactions")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id           String       @id @default(uuid())
  title        String       @db.VarChar(255)
  description  String?      @db.Text
  status       TaskStatus   @default(TODO)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  inableBudget Boolean      @default(false)
  budget       Int          @default(0)
  projectId    String
  createdBy    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  project            Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  // TaskAssignment TaskAssignment[]
  ManagerTasks       ManagerTasks?
  TeamLeaderTasks    TeamLeaderTasks?
  budgetTransactions TaskBudgetTransaction[]
  TeamTask           TeamTask[]

  @@unique([projectId, title])
  @@map("tasks")
}

model ManagerTasks {
  id        String   @id @default(uuid())
  taskId    String   @unique
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task    Task         @relation(fields: [taskId], references: [id])
  creator ProjectAdmin @relation(fields: [adminId], references: [id])

  @@map("manager_tasks")
}

model TeamLeaderTasks {
  id           String   @id @default(uuid())
  taskId       String   @unique
  teamLeaderId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  task    Task       @relation(fields: [taskId], references: [id])
  creator TeamLeader @relation(fields: [teamLeaderId], references: [id])

  @@map("team_leader_tasks")
}

model TaskBudgetTransaction {
  id              String          @id @default(uuid())
  taskId          String
  amount          Int
  transactionType TransactionType
  createdAt       DateTime        @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_budget_transactions")
}

model TaskAssignment {
  id String @id @default(uuid())
  taskId String
  participationId String

}

enum TeamTaskAssignStatus {
  PENDING
  ASSIGNED
  COMPLETED
}

model TeamTask {
  id         String   @id @default(uuid())
  taskId     String
  teamId     String
  assignedBy String
  // status    TaskStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  task     Task         @relation(fields: [taskId], references: [id])
  team     Team         @relation(fields: [teamId], references: [id])
  assigner ProjectAdmin @relation(fields: [assignedBy], references: [id])

  @@unique([taskId, teamId])
  @@map("team_tasks")
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}
