// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String?
  hasPassword       Boolean  @default(true)
  name              String
  verified          Boolean  @default(false)
  passwordChangedAt DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  googleId            String?
  profilePicture      String?
  googleEmailVerified Boolean?
  googleProfileUrl    String?
  managedProjects     Project[]            @relation("ProjectManager")
  createdProjects     Project[]            @relation("ProjectCreator")
  image               Image[]
  projectStakeholder  ProjectStakeholder[]
  Invitation          Invitation[]
  participant         Participant[]        @relation("participant")
  inviter             Participant[]        @relation("inviter")
  TeamMembership      TeamMembership[]

  @@unique([googleId, id])
  @@map("users")
}

// user    User    @relation("participant", fields: [userId], references: [id])
// inviter User    @relation("inviter", fields: [invitedBy], references: [id])

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique()
  otp       String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("otps")
}

model Project {
  id            String            @id @default(uuid())
  name          String            @db.VarChar(255)
  description   String?           @db.Text
  status        ProjectStatus     @default(PLANNING)
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  visibility    ProjectVisibility @default(PRIVATE)
  priorityLevel PriorityLevel     @default(MEDIUM)

  projectManagerId String
  projectManager   User   @relation("ProjectManager", fields: [projectManagerId], references: [id])

  creatorId String
  creator   User   @relation("ProjectCreator", fields: [creatorId], references: [id])

  ProjectTag         ProjectTag[]
  ProjectStakeholder ProjectStakeholder[]
  Invitation         Invitation[]
  Participant        Participant[]
  Team               Team[]

  @@map("projects")
}

model Tag {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(100)

  ProjectTag ProjectTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model ProjectTag {
  id        String   @id @default(uuid())
  projectId String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tag     Tag     @relation(fields: [tagId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, tagId])
  @@map("project_tags")
}

model ProjectStakeholder {
  id        String          @id @default(uuid())
  projectId String
  userId    String
  role      StakeholderRole
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_stakeholders")
}

model Image {
  id      String       @id @default(uuid())
  userId  String
  url     String
  purpose ImagePurpose
  used    Boolean      @default(false)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, url])
  @@map("images")
}

enum ImagePurpose {
  PROFILE
  DOCUMENT
  PROJECT
  OTHER
}

enum StakeholderRole {
  OWNER
  SPONSOR
  CONSULTANT
  PARTNER
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Invitation {
  id        String       @id @default(uuid())
  email     String
  projectId String
  status    InviteStatus @default(PENDING)
  invitedBy String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])
  inviter User    @relation(fields: [invitedBy], references: [id])

  @@map("invitations")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Participant {
  id        String            @id @default(uuid())
  projectId String
  userId    String
  status    ParticipantStatus @default(PENDING)
  role      ParticipantRole   @default(MEMBER)
  invitedBy String
  joinedAt  DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation("participant", fields: [userId], references: [id])
  inviter User    @relation("inviter", fields: [invitedBy], references: [id])

  @@unique([projectId, userId])
  @@map("participants")
}

enum ParticipantStatus {
  PENDING
  ACTIVE
  DECLINED
  REMOVED
}

enum ParticipantRole {
  MEMBER
  LEADER
  GUEST
  OWNER
}

model Team {
  id               String           @id @default(uuid())
  name             String           @db.VarChar(255)
  purpose          String?          @db.Text
  responsibilities String[]         @db.Text
  projectId        String
  project          Project          @relation(fields: [projectId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  status           TeamStatus       @default(ACTIVE)
  memberShips      TeamMembership[]

  @@map("teams")
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model TeamMembership {
  id               String   @id @default(uuid())
  userId           String
  teamId           String
  role             TeamRole @default(MEMBER)
  purpose          String?   @db.Text
  responsibilities String[]
  joinedAt         DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_memberships")
}

enum TeamRole {
  LEADER
  MEMBER
  GUEST
  COORDINATOR
  ADVISOR
  REVIEWER
  SUPPORT
  COMMUNICATOR
}
