// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum ImagePurpose {
//   PROFILE
//   DOCUMENT
//   PROJECT
//   OTHER
// }

enum StakeholderRole {
  OWNER
  SPONSOR
  CONSULTANT
  PARTNER
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TeamRole {
  LEADER
  MEMBER
  GUEST
  COORDINATOR
  ADVISOR
  REVIEWER
  SUPPORT
  COMMUNICATOR
}

enum ParticipantionStatus {
  PENDING
  ACTIVE
  DECLINED
  REMOVED
}

enum ParticipantionRole {
  MEMBER
}

enum ProjectAdminRole {
  MANAGER
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String?
  hasPassword       Boolean  @default(true)
  name              String
  verified          Boolean  @default(false)
  passwordChangedAt DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  googleId            String?
  profilePicture      String?
  googleEmailVerified Boolean?
  googleProfileUrl    String?
  image               Image[]
  projectStakeholder  ProjectStakeholder[]
  Invitation          Invitation[]
  participantions     Participation[]      @relation("participantion")
  TeamMemberships     TeamMembership[]
  CreatedProjects     Project[]            @relation("project_creator")

  @@unique([googleId, id])
  @@map("users")
}

// user    User    @relation("Participantion", fields: [userId], references: [id])
// inviter User    @relation("inviter", fields: [invitedBy], references: [id])

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique()
  otp       String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("otps")
}

model Project {
  id          String            @id @default(uuid())
  title       String            @db.VarChar(255)
  description String?           @db.Text
  status      ProjectStatus     @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  creatorId   String
  visibility  ProjectVisibility @default(PRIVATE)
  priority    ProjectPriority   @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags           ProjectTag[]
  stakeholders   ProjectStakeholder[]
  invitations    Invitation[]
  participations Participation[]
  teams          Team[]
  creator        User                 @relation(name: "project_creator", fields: [creatorId], references: [id])
  userId         String?

  @@unique([creatorId, title])
  @@map("projects")
}

model ProjectAdmin {
  id              String           @id @default(uuid())
  participationId String
  role            ProjectAdminRole
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  participation Participation @relation(fields: [participationId], references: [id])

  @@unique([participationId, role])
  @@map("project_admins")
}

model ProjectTag {
  id        String   @id @default(uuid())
  projectId String
  tag       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([projectId, tag])
  @@map("project_tags")
}

model ProjectStakeholder {
  id        String          @id @default(uuid())
  projectId String
  userId    String
  role      StakeholderRole
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Project         @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_stakeholders")
}

model Image {
  id     String  @id @default(uuid())
  userId String
  url    String
  used   Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, url])
  @@map("images")
}

// model Invitation {
//   id               String       @id @default(uuid())
//   email            String
//   projectId        String
//   status           InviteStatus @default(PENDING)
//   invitedUserName  String?
//   message          String?      @db.Text
//   invitedBy        String
//   sentAt           DateTime     @default(now())
//   createdAt        DateTime     @default(now())
//   updatedAt        DateTime     @updatedAt
//   participantionId String?

//   // Relations
//   project        Project         @relation(fields: [projectId], references: [id])
//   inviter        User            @relation(fields: [invitedBy], references: [id])
//   participantion Participantion? @relation(name: "invited_participation")

//   @@unique([projectId, email])
//   @@map("invitations")
// }

// model Invitation {
//   id               String       @id @default(uuid())
//   email            String
//   projectId        String
//   status           InviteStatus @default(PENDING)
//   invitedUserName  String? // Optional user name of the invited participant
//   message          String?      @db.Text // Optional message from the inviter
//   invitedBy        String
//   sentAt           DateTime? // Optional, to be set when the invitation is actually sent
//   createdAt        DateTime     @default(now())
//   updatedAt        DateTime     @updatedAt
//   participantionId String? // Optional, to be set once the invitation is accepted

//   // Relations
//   project        Project        @relation(fields: [projectId], references: [id])
//   inviter        User           @relation(fields: [invitedBy], references: [id])
//   participantion Participation? @relation(name: "invited_participation") // Ensure consistency with the Participation model

//   @@unique([projectId, email])
//   @@map("invitations")
// }

model Invitation {
  id               String       @id @default(uuid())
  email            String
  projectId        String
  status           InviteStatus @default(PENDING)
  invitedUserName  String?
  message          String?      @db.Text
  invitedBy        String
  sentAt           DateTime? // Optional
  actionedAt       DateTime?
  seen             Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  participantionId String? // Ensure this is optional

  // Relations
  project        Project        @relation(fields: [projectId], references: [id])
  inviter        User           @relation(fields: [invitedBy], references: [id])
  participantion Participation? @relation(name: "invited_participation")

  @@unique([projectId, email])
  @@map("invitations")
}

model Participation {
  id           String               @id @default(uuid())
  projectId    String
  userId       String
  status       ParticipantionStatus @default(PENDING)
  role         ParticipantionRole   @default(MEMBER)
  invitationId String?              @unique
  joinedAt     DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  invitation   Invitation?    @relation(name: "invited_participation", fields: [invitationId], references: [id])
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User           @relation("participantion", fields: [userId], references: [id])
  adminRole ProjectAdmin[]

  @@unique([projectId, userId])
  @@map("participantions")
}

model Team {
  id                 String               @id @default(uuid())
  name               String               @db.VarChar(255)
  purpose            String?              @db.Text
  projectId          String
  project            Project              @relation(fields: [projectId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  status             TeamStatus           @default(ACTIVE)
  memberShips        TeamMembership[]
  TeamResponsibility TeamResponsibility[]

  @@map("teams")
}

model TeamResponsibility {
  id             String   @id @default(uuid())
  teamId         String
  responsibility String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  team           Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, responsibility])
  @@map("team_responsibilities")
}

model TeamMembership {
  id               String   @id @default(uuid())
  userId           String
  teamId           String
  role             TeamRole @default(MEMBER)
  purpose          String?  @db.Text
  responsibilities String[]
  joinedAt         DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_memberships")
}
